{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","ref","useRef","useEffect","canvas","current","getBoundingClientRect","width","height","ctx","getContext","clearRect","currdarken","currsat","darkdelta","cwdelta","chdelta","alphadelta","cowidth","coheight","curralpha","cohmult","t","fill","setTransform","Math","sin","rotate","i","fillStyle","Color","random","toString","slice","darken","desaturate","fillRect","cos","requestAnimationFrame","style","position","controls","right","top","src","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAmFeA,MA7Ef,WACE,IAAMC,EAAMC,mBA+DZ,OA9DAC,qBAAU,WACR,IAAMC,EAASH,EAAII,QADL,EAEYD,EAAOE,wBAAzBC,EAFM,EAENA,MAAOC,EAFD,EAECA,OACfJ,EAAOG,MAAQA,EACfH,EAAOI,OAASA,EAAS,IACzB,IAAMC,EAAML,EAAOM,WAAW,MAC9BD,EAAIE,UAAU,EAAG,EAAGJ,EAAOC,GAE3B,IAAII,EAAa,GACbC,EAAU,GAEVC,EAAY,KACZC,GAAW,KACXC,EAAU,KACVC,EAAa,KAEbC,EAAU,GACVC,EAAW,GACXC,EAAY,GACZC,EAAU,GAEVC,EAAI,GACR,SAASC,IACPD,GAAK,KACLb,EAAIe,aACF,EACAC,KAAKC,IAAID,KAAKC,IAAIL,EAAU,MAC5BI,KAAKC,IAAID,KAAKC,IAAIL,EAAU,MAC5B,EACA,EACA,GAEFZ,EAAIkB,OAAOL,GACX,IAAK,IAAIM,EAAI,EAAGA,EAAI,IAAMA,IACpBA,EAAI,MAAQ,IACdnB,EAAIoB,UAAYC,IAvCF,KAAOL,KAAKM,SAASC,SAAS,IAAM,SAASC,MAAM,EAAG,IAwCjEC,OAAOtB,GACPuB,WAAWtB,IAEhBJ,EAAI2B,SACFX,KAAKM,UAAYxB,EAAQ,KAAO,IAChCkB,KAAKM,UAAYvB,EAAS,KAAO,IACjC,EAAIiB,KAAKM,SAAWb,EACpBC,EAAWM,KAAKM,SAAWV,KAG/BT,GAAcE,GAIG,IAAOF,EAAa,MAAKE,IAAc,KADxDI,GAAWH,GAEG,GAAKG,EAAU,MAAIH,IAAY,KAH7CI,GAAYH,GAIG,GAAKG,EAAW,MAAIH,IAAY,KAL/CI,GAAaH,GAMG,GAAKG,EAAY,KAAGH,IAAe,GACnDI,GAAyB,GAAdI,KAAKC,IAAIJ,GACpBT,EAAUY,KAAKY,IAAIf,GAEnBgB,sBAAsBf,GAGxBA,KACC,IAED,sBAAKgB,MAAO,CAAEC,SAAU,YAAxB,UACE,wBAAQvC,IAAKA,EAAKsC,MAAO,CAAEhC,MAAO,OAAQC,OAAQ,UAClD,uBAAOiC,UAAQ,EAACF,MAAO,CAAEC,SAAU,WAAYE,MAAO,EAAGC,IAAK,GAA9D,SACE,wBACEC,IAAI,mEACJC,KAAK,qBChEAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.08b4d47c.chunk.js","sourcesContent":["import './App.css'\nimport { useRef, useEffect } from 'react'\nimport Color from 'color'\n\nvar randomColor = () => '#' + (Math.random().toString(16) + '00000').slice(2, 8)\n\nfunction App() {\n  const ref = useRef()\n  useEffect(() => {\n    const canvas = ref.current\n    const { width, height } = canvas.getBoundingClientRect()\n    canvas.width = width\n    canvas.height = height + 100\n    const ctx = canvas.getContext('2d')\n    ctx.clearRect(0, 0, width, height)\n\n    let currdarken = 0.8\n    let currsat = 0.4\n\n    let darkdelta = 0.001\n    let cwdelta = -0.00001\n    let chdelta = 0.001\n    let alphadelta = 0.00001\n\n    let cowidth = 10\n    let coheight = 50\n    let curralpha = 0.5\n    let cohmult = 50\n\n    let t = 0\n    function fill() {\n      t += 0.001\n      ctx.setTransform(\n        1,\n        Math.sin(Math.sin(cohmult / 10000)),\n        Math.sin(Math.sin(cohmult / 10000)),\n        1,\n        0,\n        0,\n      )\n      ctx.rotate(t)\n      for (let i = 0; i < 1000; i++) {\n        if (i % 100 === 0) {\n          ctx.fillStyle = Color(randomColor())\n            .darken(currdarken)\n            .desaturate(currsat)\n        }\n        ctx.fillRect(\n          Math.random() * (width + 100) - 100,\n          Math.random() * (height + 100) - 100,\n          1 * Math.random() * cowidth,\n          coheight * Math.random() * cohmult,\n        )\n      }\n      currdarken -= darkdelta\n      curralpha -= alphadelta\n      coheight -= chdelta\n      cowidth -= cwdelta\n      if (currdarken < 0.4 || currdarken > 0.9) darkdelta *= -1\n      if (cowidth < 0 || cowidth > 50) cwdelta *= -1\n      if (coheight < 0 || coheight > 50) chdelta *= -1\n      if (curralpha < 0 || curralpha > 1) alphadelta *= -1\n      cohmult += Math.sin(t) * 50\n      currsat = Math.cos(t)\n\n      requestAnimationFrame(fill)\n    }\n\n    fill()\n  }, [])\n  return (\n    <div style={{ position: 'relative' }}>\n      <canvas ref={ref} style={{ width: '100%', height: '100%' }} />\n      <audio controls style={{ position: 'absolute', right: 0, top: 0 }}>\n        <source\n          src=\"https://s3.us-east-2.amazonaws.com/myloveydove.com/211112_00.mp3\"\n          type=\"audio/mpeg\"\n        />\n      </audio>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}